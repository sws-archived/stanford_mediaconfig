<?php
/**
 * @file
 * Primarily used for global api functions and Drupal hook implementations.
 * 
 * @author  Shea McKinney <shea@imagexmedia.com>
 * @author  Aaron McGowan <aaron@imagexmedia.com>
 */

/**
 * Used for determine if the module is in development.
 */
define('STANFORD_MEDIA_IN_DEV', TRUE);

/**
 *
 */
define('STANFORD_MEDIA_UPLOAD_DIR', 'media');

/**
 * Checks whether or not we are currently in development mode.
 *
 * Uses the contant STANFORD_MEDIA_IN_DEV. If not defined, the current mode is
 * not development. Development mode should be used at your own risk as it has
 * special behaviors, some documented and some that are not.
 *
 * To enter the development mode, ensure that STANFORD_MEDIA_IN_DEV is defiend.
 * 
 * @return bool
 *   Returns TRUE if the development mode is on, otherwise false.
 */
function stanford_mediaconfig_mode_dev() {
  return !defined('STANFORD_MEDIA_IN_DEV');
}

/**
 * Implements hook_help().
 */
function stanford_mediaconfig_help($path, $arg) {
  switch ($path) {
    case 'admin/help#stanford_mediaconfig':
      return '<p>' . t('help@stanford.edu') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function stanford_mediaconfig_menu() {

  $items['admin/config/stanford/mediaconfig'] = array(
    'title' => 'Reset Media Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_mediaconfig_reset_form'),
    'file' => 'stanford_mediaconfig.admin.inc',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_enable().
 * This is just like an installation profile for this module. In here we will
 * tackle most of the installation tasks for this module.
 */
function stanford_mediaconfig_enable() {


  // MEDIA
  // ---------------------------------------------------------------------------

  variable_set('media_root_folder', STANFORD_MEDIA_UPLOAD_DIR);
  variable_set('media__dialog_theme', 'seven');
  variable_set('image_jpeg_quality', 95);

  // FILE + ENTITIY DISPLAY SETTINGS
  // ---------------------------------------------------------------------------
  stanford_mediaconfig_enable_filedisplay();


  // MEDIA BROWSER PLUS
  // ---------------------------------------------------------------------------

  /* No special configuration needed yet */


  // MEDIA CROP
  // ---------------------------------------------------------------------------

  /* Heavily patched module is available at: https://github.com/sherakama/media_crop */
  /* Patches were submitted to the maintainers for inclusion into module. */


  // WYSIWYG
  // ---------------------------------------------------------------------------

  if (module_exists('wysiwyg')) {
    stanford_mediaconfig_enable_wysiwyg();
  }
  else {
    // This should never get here as it is in the dependencies but there have
    // been cases where this may have errored during install.
    drupal_set_message('ERROR: MISSING WYSIWYG MODULE', 'error');
  }


  // MEDIA RESPONSIVE
  // ---------------------------------------------------------------------------

  /* No configuration for this but a hack/patch below */


  // VIDEO + FitVids
  // ---------------------------------------------------------------------------

  /* Seems to work out of the box for vimeo/youtube & Local minplayer. Yeah! */


  // VIDEO + LOCAL HTML5 Player
  // ---------------------------------------------------------------------------
  // Order of video render super important. If the Vimeo/Youtube thubnails are
  // ahead of any other player PHP will suffer a critical error.

  // Set the display output of the file type 'video'
  stanford_mediaconfig_set_video_file_display();


  // DEFAULT FOLDERS
  // ---------------------------------------------------------------------------
  // stanford_mediaconfig_enable_folders();
  stanford_mediaconfig_create_taxonomy_structure();


  // USERS + Permissions
  // ---------------------------------------------------------------------------
  stanford_mediaconfig_configure_user_permissions();


  // Clear out caches
  drupal_flush_all_caches();
}

/**
 * Implements hook_disable().
 */
function stanford_mediaconfig_disable() {
  if (stanford_mediaconfig_mode_dev()) {
    stanford_mediaconfig_remove_taxonomy_structure();
  }
}

/**
 * Enable WYSIWYG Settings and configuration.
 * Run on hook_enable
 */

function stanford_mediaconfig_enable_wysiwyg() {

  // Settings found at /admin/config/media/browser.
  $allowed_types = array(
    'image',
    'video',
    'audio',
    'document'
  );
  variable_set('media__wysiwyg_allowed_types', $allowed_types);

  $field_plugins = array(
    'upload',
    'library_plus',
    'media_default--media_browser_my_files',
    'media_internet',
  );
  variable_set('media__wysiwyg_browser_plugins', $field_plugins);

  variable_set('media__wysiwyg_upload_directory', STANFORD_MEDIA_UPLOAD_DIR);

  // End ettings found at /admin/config/media/browser.



  // To add the media button to wysiwyg we will have to add the media markup
  // filter to each of the input formats in use then add the button to the
  // wysiwyg profile settings.

  $profiles = db_select('wysiwyg', 'w')
            ->fields('w')
            ->execute();

  // Foreach of the profiles get the settings and add the filter
  while ($record = $profiles->fetchAssoc()) {
    $settings = unserialize($record['settings']);
    $filter = $record['format'];

    // Check to see if the enabled markup is enabled on filter.
    $filters = db_select('filter', 'f')
            ->fields('f')
            ->condition('format', $filter)
            ->condition('module', 'media')
            ->execute()
            ->fetchAssoc();

    if (!is_array($filters)) {
      // Add the convert to markup filter.
      $media_filter = array(
        'format'    => $filter,
        'module'    => 'media',
        'name'      => 'media_filter',
        'weight'    => -10,
        'status'    => 1,
        'settings'  => array(),
      );

      drupal_write_record('filter', $media_filter);
    }

    // Allow crop and browser functionality in the wysiwyg.
    $settings['buttons']['media_crop_ckeditor'] = array('media_crop_edit_instance');
    $settings['buttons']['drupal']['media'] = 1;
    $settings = serialize($settings);

    $wys = array(
      'format' => $filter,
      'settings' => $settings,
      'editor' => $record['editor'],
    );
    drupal_write_record('wysiwyg', $wys, array('format', 'editor'));
  }

}

function stanford_mediaconfig_get_mediafolders_vocabulary_machine_name() {
  return variable_get('stanford_mediaconfig_mediafolders_vocabulary_machine_name', 'media_folders');
}

function stanford_mediaconfig_default_taxonomy_terms() {
  return array(
    stanford_mediaconfig_get_mediafolders_vocabulary_machine_name() => array(
      'name' => t('Media Root'),
      'module' => 'stanford_mediaconfig',
      'terms' => array(
        array(
          'name' => t('Images'),
          'format' => 'filtered_html',
          'children' => array(
            array(
              'name' => t('Thumbnails')
            ),
            array(
              'name' => t('Icons')
            ),
            array(
              'name' => t('Banners')
            ),
            array(
              'name' => t('Blocks')
            )
          )
        ),
        array(
          'name' => t('Documents'),
          'children' => array(
            array(
              'name' => t('Forms'),
            ),
            array(
              'name' => t('PDF')
            )
          )
        ),
        array(
          'name' => t('Video'),
          'children' => array(
            array(
              'name' => t('YouTube')
            ),
            array(
              'name' => t('Vimeo')
            ),
            array(
              'name' => t('Streaming')
            )
          )
        )
      )
    )
  );
}


/**
 * @hook_enable sub function.
 * Create default folders for the media library to keep stuff organized
 */

function _stanford_mediaiconfig_create_taxonomy_terms($vocabulary, array $terms = array(), $parent = NULL) {
  foreach ($terms as $info) {
    $term = (object) array(
      'name' => $info['name'],
      'vid' => $vocabulary->vid,
      'format' => isset($info['format']) ? $info['format'] : 'filtered_html'
    );
    
    if (NULL !== $parent) {
      $term->parent = $parent->tid;
    }
    
    taxonomy_term_save($term);
    
    if (isset($info['children'])) {
      _stanford_mediaiconfig_create_taxonomy_terms($vocabulary, $info['children'], $term);
    }
  }
}

function stanford_mediaconfig_create_taxonomy_structure() {
  $has_ran = variable_get('stanford_mediaconfig_installed_folders', FALSE);
  if ($has_ran && !stanford_mediaconfig_mode_dev()) {
    return;
  }

  foreach (stanford_mediaconfig_default_taxonomy_terms() as $machine_name => $info) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
    if (FALSE === $vocabulary) {
      taxonomy_vocabulary_save((object) array(
        'name' => $info['name'],
        'machine_name' => $machine_name,
        'module' => $info['module']
      ));
      $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
    }
    
    if (!empty($info['terms'])) {
      _stanford_mediaiconfig_create_taxonomy_terms($vocabulary, $info['terms']);
    }
  }

  variable_set('stanford_mediaconfig_installed_folders', TRUE);
}

function stanford_mediaconfig_remove_taxonomy_structure() {
  foreach (stanford_mediaconfig_default_taxonomy_terms() as $machine_name => $info) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
    taxonomy_vocabulary_delete($vocabulary->vid);
  }
}


/**
 * hook_enable sub function
 * Configure the file and image display settings for output. This includes
 * The file and entity displays
 */

function stanford_mediaconfig_enable_filedisplay() {

  // $formatters = file_info_formatter_types();
  // We are just going to hardcode these for now....



  // Display for IMAGE file type on DEFAULT view mode
  // ---------------------------------------------------------------------------
  $settings = array(
    'image_style' => 'media_responsive_widest',
    'alt' => '[file:field_file_image_alt_text]',
    'title' => '[file:field_file_image_title_text]',
  );

  $formatter = array(
    'name' => 'image__default__file_image',
    'weight' => -49,
    'status' => 1,
    'settings' => $settings,
  );

  // Just get rid of any old one then save a new one.
  db_delete('file_display')
    ->condition('name', 'image__default__file_image')
    ->execute();
  drupal_write_record('file_display', $formatter);


  // Field Instance Settings.
  // ---------------------------------------------------------------------------

  // Hide all extra fields on file entity types by default.
  $fields = db_select('field_config_instance', 'fci')
    ->fields('fci')
    ->condition('entity_type', 'file', '=')
    ->execute();

  while ($fs = $fields->fetchAssoc()) {
    $instance = field_info_instance($fs['entity_type'], $fs['field_name'], $fs['bundle']);
    if (NULL === $instance) {
      // Log that the instance does not exist and then move on.
      watchdog('stanford_mediaconfig', 'The !entity of type !bundle does not have an instance for field !field', array(
          '!entity' => $fs['entity_type'],
          '!bundle' => $fs['bundle'],
          '!field' => $fs['field_name'],
        ),
        WATCHDOG_DEBUG
      );
      continue;
    }
    
    foreach ($instance['display'] as $k => $v) {
      $instance['display'][$k]['type'] = "hidden";
    }
    field_update_instance($instance);
  }

  // File Type Streams Allowed for Images
  // ---------------------------------------------------------------------------

  db_delete('file_type_streams')
    ->condition('type', 'image')
    ->condition('stream', 'public')
    ->condition('stream', 'vimeo', "or")
    ->condition('stream', 'youtube', "or")
    ->execute();

  db_insert('file_type_streams')
    ->fields(array(
      'type',
      'stream',
    ))
    ->values(array(
      array(
        'type'    => 'image',
        'stream'  => 'public',
      ),
    )
  );


  // File Type Streams Allowed for Video
  // ---------------------------------------------------------------------------

  db_delete('file_type_streams')
    ->condition('type', 'video')
    ->condition('stream', 'public')
    ->condition('stream', 'vimeo', "or")
    ->condition('stream', 'youtube', "or")
    ->execute();

  db_insert('file_type_streams')
    ->fields(array(
      'type',
      'stream',
    ))
    ->values(array(
      array(
        'type'    => 'video',
        'stream'  => 'public',
      ),
      array(
        'type'    => 'video',
        'stream'  => 'vimeo',
      ),
      array(
        'type'    => 'video',
        'stream'  => 'youtube',
      ),
    )
  );


  // File Type Streams Allowed for Generic Files
  // ---------------------------------------------------------------------------


  // File Type Streams Allowed for Audio
  // ---------------------------------------------------------------------------


}

/**
 * Configures the file display for video files
 * @return [type] [description]
 */
function stanford_mediaconfig_set_video_file_display() {

  //
  // DEFAULT VIEW MODE.
  //

  $displays_original = file_displays('video', 'preview');
  $displays_original += file_displays('video', 'default');

  // $displays['{viewmode}']['{formatter}'] = {a whole bunch of settings}
  $displays['preview']['media_vimeo_image'] = file_display_new('video', 'preview', 'media_vimeo_image');
  $displays['preview']['media_youtube_image'] = file_display_new('video', 'preview', 'media_youtube_image');
  $displays['preview']['file_field_media_large_icon'] = file_display_new('video', 'preview', 'file_field_media_large_icon');

  // Default Video.
  $displays['default']['media_youtube_video'] = file_display_new('video', 'default', 'media_youtube_video');
  $displays['default']['media_youtube_image'] = file_display_new('video', 'default', 'media_youtube_image');
  $displays['default']['media_vimeo_video'] = file_display_new('video', 'default', 'media_vimeo_video');
  $displays['default']['media_vimeo_image'] = file_display_new('video', 'default', 'media_vimeo_image');
  $displays['default']['file_field_html5_player'] = file_display_new('video', 'default', 'file_field_html5_player');


  // Save them all once.
  foreach ($displays as $view_mode => $displayset) {
    foreach ($displayset as $formatter => $display) {

      $r = db_select('file_display', 'fd')
        ->fields('fd')
        ->condition('name', $display->name)
        ->execute();

      $count = $r->rowCount();
      if ($count) {
        continue;
      }

      file_display_save((object) $display);
    }
  }

  $displays['default']['file_field_html5_player'] = array(
    'status' => TRUE,
    'weight' => "-38",
    'name' => "video__default__file_field_html5_player",
    'settings' => array(
      'template' => "jqueryui",
      'preload' => 1,
      'autoplay' => 0,
      'loop' => 0,
      'width' => "100%",
      'height' => '400px',
      'volume' => '80',
      'sources' => 0,
      'debug' => 0,
    ),
    'table' => 'file_display',
    'type' => 'Local',
    'export_type' => 1,
  );

  $displays['default']['media_vimeo_image'] = array(
    'status' => TRUE,
    'weight' => "-40",
    'name' => "video__default__media_vimeo_image",
    'settings' => array(
      'image_style' => 'large',
    ),
    'table' => 'file_display',
    'type' => 'Overridden',
    'export_type' => 3,
    'export_module' => 'media_vimeo',
  );

  $displays['default']['media_vimeo_video'] = array(
    'status' => TRUE,
    'weight' => "-43",
    'name' => "video__default__media_vimeo_video",
    'settings' => array(
      'width' => 640,
      'height' => 390,
      'color' => '',
      'protocol' => "http://",
      'autoplay' => 0,
      'loop' => 0,
      'title' => 1,
      'byline' => 1,
      'portrait' => 1,
      'api' => 0,
    ),
    'table' => 'file_display',
    'type' => 'Overridden',
    'export_type' => 3,
    'export_module' => "media_vimeo",
  );

  $displays['default']['media_youtube_image'] = array(
    'status' => TRUE,
    'weight' => "-39",
    'name' => "video__default__media_youtube_image",
    'settings' => array(
      'image_style' => 'large',
    ),
    'table' => 'file_display',
    'type' => 'Overridden',
    'export_type' => 3,
    'export_module' => 'media_youtube',
  );

  $displays['default']['media_youtube_video'] = array(
    'status' => TRUE,
    'weight' => "-44",
    'name' => "video__default__media_youtube_video",
    'settings' => array(
      'width' => 640,
      'height' => 390,
      'theme' => 'dark',
      'color' => 'red',
      'protocol' => "https:",
      'autoplay' => 0,
      'loop' => 0,
      'autohide' => "2",
      'showinfo' => 1,
      'modestbranding' => 0,
      'rel' => 1,
      'nocookie' => 0,
      'protocol_specify' => 0,
      'enablejsapi' => 0,
      'origin' => "",
    ),
    'table' => 'file_display',
    'type' => 'Overridden',
    'export_type' => 3,
    'export_module' => "media_youtube",
  );


  //
  // PREVIEW VIEW MODE.
  //

  $displays['preview']['file_field_media_large_icon'] = array(
    'status' => 1,
    'weight' => "-50",
    'name' => "video__preview__file_field_media_large_icon",
    'settings' => NULL,
    'table' => 'file_display',
    'export_type' => 1,
    'type' => 'Local'
  );

  $displays['preview']['media_youtube_image'] = array(
    'status' => TRUE,
    'weight' => "-42",
    'name' => "video__preview__media_vimeo_image",
    'settings' => array(
      'image_style' => 'square_thumbnail',
    ),
    'table' => 'file_display',
    'type' => 'Local',
    'export_type' => 3,
    'export_module' => 'media_vimeo',
  );

  $displays['preview']['media_vimeo_image'] = array(
    'status' => TRUE,
    'weight' => "-41",
    'name' => "video__preview__media_youtube_image",
    'settings' => array(
      'image_style' => 'square_thumbnail',
    ),
    'table' => 'file_display',
    'type' => 'Local',
    'export_type' => 3,
    'export_module' => 'media_youtube',
  );

  // Save them all twice.
  foreach ($displays as $view_mode => $displayset) {
    foreach ($displayset as $k => $display) {
      file_display_save((object) $display);
    }
  }
}

function stanford_mediaconfig_get_permissions() {
  return array(
   // 'view_files',
    'create files',
    'filter media',
    'upload media',
    'preview media',
    'download files',
    'edit own files',
    'view own files',
    'media grid view',
    'media list view',
    'delete own files',
    'access media backend',
    'view own private files',
    'add media from remote sources',
  );
}

/**
 * Configure the permission settings for stanford roles
 */
function stanford_mediaconfig_configure_user_permissions() {
  $modules = user_permission_get_modules();
  $permissions = array();
  foreach (stanford_mediaconfig_get_permissions() as $permission) {
    if (isset($modules[$permission])) {
      $permissions[] = $permission;
    }
  }

  if (FALSE !== ($stanford_staff = user_role_load_by_name(stanford_mediaconfig_get_stanford_staff_user_role_name()))) {
    user_role_grant_permissions($stanford_staff->rid, $permissions);
  }

  if (FALSE !== ($stanford_faculty = user_role_load_by_name(stanford_mediaconfig_get_stanford_faculty_user_role_name()))) {
    user_role_grant_permissions($stanford_faculty->rid, $permissions);
  }
}

/**
 * Returns the name of the stanford staff user role.
 *
 * @return string
 *   Returns the name of the staff user role.
 */
function stanford_mediaconfig_get_stanford_staff_user_role_name() {
  return 'Stanford Staff';
}

/**
 * Returns the name of the stanford faculty user role.
 *
 * @return string
 *   Returns the name of the faculty user role.
 */
function stanford_mediaconfig_get_stanford_faculty_user_role_name() {
  return 'Stanford Faculty';
}

//  ////////////////////////////////////////////////////////////////////////////
//  HOOKS N PATCHES FOR INCOMPATIBIILTY ISSUES
//  ////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_entity_info_alter().
 *
 * Add media_responsive view modes to the file entity type.
 */
function stanford_mediaconfig_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['media_crop'] = array('label' => t('Media Crop'), 'custom settings' => FALSE);
}

/**
 * If media_responsive and media_crop both exist we need to create a patch
 * between the two to work as they both override themeable output.
 * @param  [type] $element  [description]
 * @param  [type] $tag_info [description]
 * @param  [type] $settings [description]
 * @return [type]           [description]
 */
function stanford_mediaconfig_media_token_to_markup_alter(&$element, $tag_info, $settings) {

  if (module_exists('media_responsive') && module_exists('media_crop')) {

    if (isset($element['content']['file']['#style_name']) &&
    $element['content']['file']['#style_name'] == "media_responsive_widest") {
      $element['#attributes']['class'][] = "file-media-responsive";
      $element['#attributes']['style'] = 'max-width:' . $element['content']['file']['#width'] . 'px;';
      $element['#attributes']['width'] = "100%";
      $element['#width'] = "100%";
      unset($element['#attributes']['height']);
      unset($element['height']);
    }

  }

}


/**
 * Documents get weird links added to them in the media_thumbnail bits. Lets
 * fix that for them.
 * @param  [type] $variables [description]
 * @return [type]            [description]
 */
function stanford_mediaconfig_preprocess_media_thumbnail(&$variables) {

  if ($variables['element']['#file']->type == "document") {
    $mime = $variables['element']['#file']->filemime;
    $filename = str_replace("/", "-", $mime);
    $new_html = theme('image', array(
     'path' => base_path() . "modules/file/icons/" . $filename . ".png",
     )
    );

    $variables['element']["#children"] = $new_html;
  }
}


//  ////////////////////////////////////////////////////////////////////////////
//   END HOOKS N PATCHES
//  ////////////////////////////////////////////////////////////////////////////

