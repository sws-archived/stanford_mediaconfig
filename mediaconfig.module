<?php

/**
 * @file
 * @author  Shea McKinney <shea@imagexmedia.com>
 */

define('MEDIA_UPLOAD_DIR', 'media');

/**
 * TESTING PAGES
 * /admin/config/media/browser
 */


/**
 * Implements hook_menu().
 */
function mediaconfig_menu() {

  $items['admin/config/media/mediaconfig'] = array(
    'title' => 'Reset Media Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediaconfig_reset_form'),
    'file' => 'mediaconfig.admin.inc',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_enable().
 * This is just like an installation profile for this module. In here we will
 * tackle most of the installation tasks for this module.
 */
function mediaconfig_enable() {


  // MEDIA
  // ---------------------------------------------------------------------------

  variable_set('media_root_folder', MEDIA_UPLOAD_DIR);
  variable_set('media__dialog_theme', 'seven');
  variable_set('image_jpeg_quality', 95);

  // FILE + ENTITIY DISPLAY SETTINGS
  // ---------------------------------------------------------------------------
  mediaconfig_enable_filedisplay();


  // MEDIA BROWSER PLUS
  // ---------------------------------------------------------------------------

  /* No special configuration needed yet */


  // MEDIA CROP
  // ---------------------------------------------------------------------------

  /* Heavily patched module is available at: https://github.com/sherakama/media_crop */
  /* Patches were submitted to the maintainers for inclusion into module. */


  // WYSIWYG
  // ---------------------------------------------------------------------------

  if (module_exists('wysiwyg')) {
    mediaconfig_enable_wysiwyg();
  }

  // CKEDITOR
  // ---------------------------------------------------------------------------

  if (module_exists('ckeditor')) {
    // mediaconfig_enable_ckeditor();
  }


  // MEDIA RESPONSIVE
  // ---------------------------------------------------------------------------

  /* No configuration for this but a hack/patch below */


  // VIDEO + FitVids
  // ---------------------------------------------------------------------------

  /* Seems to work out of the box for vimeo/youtube & Local minplayer. Yeah! */


  // VIDEO + LOCAL HTML5 Player
  // ---------------------------------------------------------------------------
  // Order of video render super important. If the Vimeo/Youtube thubnails are
  // ahead of any other player PHP will suffer a critical error.

  // Set the display output of the file type 'video'
  mediaconfig_set_video_file_display();


  // DEFAULT FOLDERS
  // ---------------------------------------------------------------------------
  mediaconfig_enable_folders();


  drupal_flush_all_caches();
}

/**
 * Implements hook_requirements().
 * Check to see if the cropping plugin is available
 */
function mediaconfig_requirements($phase) {

  $req = array();
  $libraries = libraries_get_libraries();

  // Runtime and Installation Requirements.
  // Found at /admin/reports/status
  if ($phase == "runtime" || $phase == "install") {

    // For using responsive videos.
    if (!isset($libraries['fitvids'])) {
      $req['fitvids'] = array(
        "title" => t("FitVids Plugin"),
        "value" => 'Missing Library Plugin: FitVids. Please ' . l(t('download it'), 'https://github.com/davatron5000/FitVids.js', array('absolute' => TRUE)) . ' and place it into sites/all/libraries',
        "severity" => REQUIREMENT_ERROR,
      );
    }

    // For media crop module.
    if (!isset($libraries['jquery.imgareaselect'])) {
      $req['media_crop'] = array(
        "title" => t("Missing Crop Plugin"),
        "value" => 'Missing Library Plugin: jquery.imgareaselect. Please ' . l(t('download it'), 'http://odyniec.net/projects/imgareaselect/jquery.imgareaselect-0.9.9.zip', array('absolute' => TRUE)) . ' and place it into sites/all/libraries',
        "severity" => REQUIREMENT_ERROR,
      );
    }

  }

  return $req;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For testing purposes only. Will be removed.
 */
/*function mediaconfig_form_page_node_form_alter(&$form, &$form_state, $form_id) {

  $setting = array(
    "media_default--media_browser_my_files" => "media_default--media_browser_my_files",
    "media_internet" => "media_internet",
    "upload" => "upload",
  );

  $settings = array(
    'ckeditor2' => array(
      'plugins' => array(
        'media' => array(
          'global' => array(
            'enabledPlugins' => $setting,
          ),
        ),
      ),
    ),
  );

  $settings = mediaconfig_prepare_media_settings();

  drupal_add_js("console.log(Drupal.settings); console.log(Drupal.media.popups.mediaBrowser.getDefaults()); console.log(" . $settings . ");", array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));

}*/

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds form fields for wysiwyg settings but for use with ckeditor module
 * instead of wysiwyg module. The form labels are changed, but
 * the actual form fields and variables remain the same as found in
 * media_admin_config_browser().
 *
 * @see media module: media/includes/media.admin.inc
 */
function mediaconfig_form_media_admin_config_browser_alter(&$form, &$form_state, $form_id) {

  // Additional configuration if the CKEDITOR module is enabled.
  $form['wysiwyg'] = array(
    '#type' => 'fieldset',
    '#title' => t('CKEDITOR configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#access' => module_exists('ckeditor'),
  );
  $plugins = media_get_browser_plugin_info();
  $form['wysiwyg'][media_variable_name('wysiwyg_browser_plugins')] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled browser plugins'),
    '#options' => array(),
    '#required' => FALSE,
    '#default_value' => media_variable_get('wysiwyg_browser_plugins'),
    '#description' => t('If no plugins are selected, they will all be available.'),
  );
  foreach ($plugins as $key => $plugin) {
    $form['wysiwyg'][media_variable_name('wysiwyg_browser_plugins')]['#options'][$key] = !empty($plugin['title']) ? $plugin['title'] : $key;
  }
  $form['wysiwyg'][media_variable_name('wysiwyg_upload_directory')] = array(
    '#type' => 'textfield',
    '#title' => t("File directory for uploaded media"),
    '#default_value' => media_variable_get('wysiwyg_upload_directory'),
    '#description' => t('Optional subdirectory within the upload destination where files will be stored. Do not include preceding or trailing slashes.'),
  );

  if (module_exists('token')) {
    $form['wysiwyg'][media_variable_name('wysiwyg_upload_directory')]['#description'] .= t('This field supports tokens.');
    $form['wysiwyg']['tokens'] = array(
      '#theme' => 'token_tree',
      '#dialog' => TRUE,
    );
  }

  $form['wysiwyg'][media_variable_name('wysiwyg_allowed_types')] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed types in CKEDITOR'),
    '#options' => file_entity_type_get_names(),
    '#default_value' => media_variable_get('wysiwyg_allowed_types'),
  );

}

/**
 * Implements of hook_element_info_alter().
 *
 * Adds a callback to load global media settings for ckeditor media browser.
 */
function mediaconfig_element_info_alter(&$types) {

  $types['text_format']['#pre_render'][] = 'mediaconfig_pre_render_text_format';

}

/**
 * This function adds global media settings for the media browser when it's
 * loaded from the wysiwyg icon in ckeditor.
 *
 * @param $element
 *   A fully populated form element to add the editor to.
 * @return
 *   The same $element.
 */
function mediaconfig_pre_render_text_format($element) {

  static $init = FALSE;

  // TODO: This approach ideally ought to be bundled up with other changes
  //       and contributed as a patch to ckeditor so that these media browser
  //       settings are configurable per ckeditor profile. For this to happen
  //       the settings would need to be added to the profile edit form and
  //       saved to the profile. Then the settings would need to be retrieved
  //       when a profile is loaded for use and they would need to be
  //       converted and injected into Drupal.settings as is done here.

  if ($init === FALSE) {

    $settings = mediaconfig_prepare_media_settings();

    $js = "Drupal.settings.ckeditor.plugins['media'].global = @settings;";

    drupal_add_js(str_replace('@settings', $settings, $js), array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));

    $init = TRUE;

  }

  return $element;

}

/**
 * Helper. Bundles up wysiwyg settings into an array and converts them to
 * javascript in the manner they're expected.
 *
 * @return
 *   Javascript object containing media browser settings for ckeditor.
 */
function mediaconfig_prepare_media_settings() {

  $plugins = variable_get('media__wysiwyg_browser_plugins', array());

  $types = variable_get('media__wysiwyg_allowed_types', array());

  $settings = array(
    'enabledPlugins' => array_combine($plugins, $plugins),
    'file_directory' => variable_get('media__wysiwyg_upload_directory', ''),
    'file_extensions' => variable_get('media__file_extensions', ''),
    'max_filesize' => '',
    // TODO: Figure out a way to load these from a setting.
    'schemes' => array('public' => 'public', 'youtube' => 'youtube', 'vimeo' => 'vimeo'),
    'types' => array_combine($types, $types),
    'uri_scheme' => 'public',
  );

  return drupal_json_encode($settings);

}

/**
 * Enable WYSIWYG Settings and configuration.
 * Run on hook_enable
 */

function mediaconfig_enable_wysiwyg() {

  // Settings found at /admin/config/media/browser.
  $allowed_types = array(
    'image',
    'video',
    'audio',
    'document'
  );
  variable_set('media__wysiwyg_allowed_types', $allowed_types);

  $field_plugins = array(
    'upload',
    'library_plus',
    'media_default--media_browser_my_files',
    'media_internet',
  );
  variable_set('media__wysiwyg_browser_plugins', $field_plugins);

  variable_set('media__wysiwyg_upload_directory', MEDIA_UPLOAD_DIR);

  // End ettings found at /admin/config/media/browser.



  // To add the media button to wysiwyg we will have to add the media markup
  // filter to each of the input formats in use then add the button to the
  // wysiwyg profile settings.

  $profiles = db_select('wysiwyg', 'w')
            ->fields('w')
            ->execute();

  // Foreach of the profiles get the settings and add the filter
  while ($record = $profiles->fetchAssoc()) {
    $settings = unserialize($record['settings']);
    $filter = $record['format'];

    // Check to see if the enabled markup is enabled on filter.
    $filters = db_select('filter', 'f')
            ->fields('f')
            ->condition('format', $filter)
            ->condition('module', 'media')
            ->execute()
            ->fetchAssoc();

    if (!is_array($filters)) {
      // Add the convert to markup filter.
      $media_filter = array(
        'format'    => $filter,
        'module'    => 'media',
        'name'      => 'media_filter',
        'weight'    => -10,
        'status'    => 1,
        'settings'  => array(),
      );

      drupal_write_record('filter', $media_filter);
    }

    // Allow crop and browser functionality in the wysiwyg.
    $settings['buttons']['media_crop_ckeditor'] = array('media_crop_edit_instance');
    $settings['buttons']['drupal']['media'] = 1;
    $settings = serialize($settings);

    $wys = array(
      'format' => $filter,
      'settings' => $settings,
      'editor' => $record['editor'],
    );
    drupal_write_record('wysiwyg', $wys, array('format', 'editor'));
  }

}


/**
 * @hook_enable sub function.
 * Create default folders for the media library to keep stuff organized
 */

function mediaconfig_enable_folders() {

  // We do not want to duplicate the folder on every enable. Just store it once.
  $one_run = variable_get('mediaconfig_installed_folders', FALSE);
  if ($one_run) {
    return;
  }

  /**
   * Set up the media browser library folders like this.
   * -- Media Root
   * -- Images
   * --- Thumbnails
   * --- Icons
   * --- Banners
   * --- Blocks
   * -- Documents
   * --- Forms
   * --- PDF
   * -- Video
   * --- YouTube
   * --- Vimeo
   * --- Streaming
   */

  // Media folders vocabulary.
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');

  if (empty($vocabulary)) {

    // Create media_folders vocabulary because it doesn't exist yet.
    $vocab = new stdClass();
    $vocab->name = t('Media Folders');
    $vocab->machine_name = 'media_folders';
    $vocab->description = t('Media folders vocabulary for organizing media');
    $vocab->heirarchy = 1;
    $vocab->module = 'mediaconfig';
    $vocab->weight = 1;

    taxonomy_vocabulary_save($vocab);

    $vocabulary = taxonomy_vocabulary_machine_name_load('media_folders');

  }

  // Media Root
  // Leave alone for now.


  // Images.
  $term = new stdClass();
  $term->vid = $vocabulary->vid;
  $term->name = t("Images");
  $term->format = "filtered_html";
  taxonomy_term_save($term);

    // Thumbnails.
    $term->name = t('Thumbnails');
    $term->parent = $term->tid;
    unset($term->tid);
    taxonomy_term_save($term);

    // Icons.
    $term->name = t('Icons');
    unset($term->tid);
    taxonomy_term_save($term);

    // Banners.
    $term->name = t('Banners');
    unset($term->tid);
    taxonomy_term_save($term);

    // Blocks.
    $term->name = t('Blocks');
    unset($term->tid);
    taxonomy_term_save($term);

  // Documents.
  unset($term->parent);
  unset($term->tid);
  $term->name = t("Documents");
  $parent_term = taxonomy_term_save($term);

    // Forms.
    $term->parent = $term->tid;
    $term->name = t("Forms");
    unset($term->tid);
    taxonomy_term_save($term);

    // PDF.
    $term->name = t("PDF");
    unset($term->tid);
    taxonomy_term_save($term);

  // Video.
  unset($term->parent);
  unset($term->tid);
  $term->name = t("Video");
  $parent_term = taxonomy_term_save($term);

    // YouTube.
    $term->parent = $term->tid;
    $term->name = t("YouTube");
    unset($term->tid);
    taxonomy_term_save($term);

    // Vimeo.
    $term->name = t("Vimeo");
    unset($term->tid);
    taxonomy_term_save($term);

  // Success!
  variable_set('mediaconfig_installed_folders', TRUE);

}


/**
 * hook_enable sub function
 * Configure the file and image display settings for output. This includes
 * The file and entity displays
 */

function mediaconfig_enable_filedisplay() {

  // $formatters = file_info_formatter_types();
  // We are just going to hardcode these for now....



  // Display for IMAGE file type on DEFAULT view mode
  // ---------------------------------------------------------------------------
  $settings = array(
    'image_style' => 'media_responsive_widest',
    'alt' => '[file:field_file_image_alt_text]',
    'title' => '[file:field_file_image_title_text]',
  );

  $formatter = array(
    'name' => 'image__default__file_image',
    'weight' => -49,
    'status' => 1,
    'settings' => $settings,
  );

  // Just get rid of any old one then save a new one.
  db_delete('file_display')
    ->condition('name', 'image__default__file_image')
    ->execute();
  drupal_write_record('file_display', $formatter);


  // Field Instance Settings.
  // ---------------------------------------------------------------------------

  // Hide all extra fields on file entity types by default.
  $fields = db_select('field_config_instance', 'fci')
            ->fields('fci')
            ->condition('entity_type', 'file', '=')
            ->execute();

  // Set all fields to hidden by default on the default view mode.
  while ($fs = $fields->fetchAssoc()) {
    $instance = field_info_instance($fs['entity_type'], $fs['field_name'], $fs['bundle']);
    foreach ($instance['display'] as $k => $v) {
      $instance['display'][$k]['type'] = "hidden";
    }
    field_update_instance($instance);
  }


  // File Type Streams Allowed for Images
  // ---------------------------------------------------------------------------

  db_delete('file_type_streams')
    ->condition('type', 'image')
    ->condition('stream', 'public')
    ->condition('stream', 'vimeo', "or")
    ->condition('stream', 'youtube', "or")
    ->execute();

  db_insert('file_type_streams')
    ->fields(array(
      'type',
      'stream',
    ))
    ->values(array(
      array(
        'type'    => 'image',
        'stream'  => 'public',
      ),
    )
  );


  // File Type Streams Allowed for Video
  // ---------------------------------------------------------------------------

  db_delete('file_type_streams')
    ->condition('type', 'video')
    ->condition('stream', 'public')
    ->condition('stream', 'vimeo', "or")
    ->condition('stream', 'youtube', "or")
    ->execute();

  db_insert('file_type_streams')
    ->fields(array(
      'type',
      'stream',
    ))
    ->values(array(
      array(
        'type'    => 'video',
        'stream'  => 'public',
      ),
      array(
        'type'    => 'video',
        'stream'  => 'vimeo',
      ),
      array(
        'type'    => 'video',
        'stream'  => 'youtube',
      ),
    )
  );


  // File Type Streams Allowed for Generic Files
  // ---------------------------------------------------------------------------


  // File Type Streams Allowed for Audio
  // ---------------------------------------------------------------------------


}

/**
 * Configures the file display for video files
 * @return [type] [description]
 */
function mediaconfig_set_video_file_display() {

  //
  // DEFAULT VIEW MODE.
  //

  $displays_original = file_displays('video', 'preview');
  $displays_original += file_displays('video', 'default');

  // $displays['{viewmode}']['{formatter}'] = {a whole bunch of settings}
  $displays['preview']['media_vimeo_image'] = file_display_new('video', 'preview', 'media_vimeo_image');
  $displays['preview']['media_youtube_image'] = file_display_new('video', 'preview', 'media_youtube_image');
  $displays['preview']['file_field_media_large_icon'] = file_display_new('video', 'preview', 'file_field_media_large_icon');

  // Default Video.
  $displays['default']['media_youtube_video'] = file_display_new('video', 'default', 'media_youtube_video');
  $displays['default']['media_youtube_image'] = file_display_new('video', 'default', 'media_youtube_image');
  $displays['default']['media_vimeo_video'] = file_display_new('video', 'default', 'media_vimeo_video');
  $displays['default']['media_vimeo_image'] = file_display_new('video', 'default', 'media_vimeo_image');
  $displays['default']['file_field_html5_player'] = file_display_new('video', 'default', 'file_field_html5_player');


  // Save them all once.
  foreach ($displays as $view_mode => $displayset) {
    foreach ($displayset as $formatter => $display) {

      $r = db_select('file_display', 'fd')
        ->fields('fd')
        ->condition('name', $display->name)
        ->execute();

      $count = $r->rowCount();
      if ($count) {
        continue;
      }

      file_display_save((object) $display);
    }
  }

  $displays['default']['file_field_html5_player'] = array(
    'status' => TRUE,
    'weight' => "-38",
    'name' => "video__default__file_field_html5_player",
    'settings' => array(
      'template' => "jqueryui",
      'preload' => 1,
      'autoplay' => 0,
      'loop' => 0,
      'width' => "100%",
      'height' => '400px',
      'volume' => '80',
      'sources' => 0,
      'debug' => 0,
    ),
    'table' => 'file_display',
    'type' => 'Local',
    'export_type' => 1,
  );

  $displays['default']['media_vimeo_image'] = array(
    'status' => TRUE,
    'weight' => "-40",
    'name' => "video__default__media_vimeo_image",
    'settings' => array(
      'image_style' => 'large',
    ),
    'table' => 'file_display',
    'type' => 'Overridden',
    'export_type' => 3,
    'export_module' => 'media_vimeo',
  );

  $displays['default']['media_vimeo_video'] = array(
    'status' => TRUE,
    'weight' => "-43",
    'name' => "video__default__media_vimeo_video",
    'settings' => array(
      'width' => 640,
      'height' => 390,
      'color' => '',
      'protocol' => "http://",
      'autoplay' => 0,
      'loop' => 0,
      'title' => 1,
      'byline' => 1,
      'portrait' => 1,
      'api' => 0,
    ),
    'table' => 'file_display',
    'type' => 'Overridden',
    'export_type' => 3,
    'export_module' => "media_vimeo",
  );

  $displays['default']['media_youtube_image'] = array(
    'status' => TRUE,
    'weight' => "-39",
    'name' => "video__default__media_youtube_image",
    'settings' => array(
      'image_style' => 'large',
    ),
    'table' => 'file_display',
    'type' => 'Overridden',
    'export_type' => 3,
    'export_module' => 'media_youtube',
  );

  $displays['default']['media_youtube_video'] = array(
    'status' => TRUE,
    'weight' => "-44",
    'name' => "video__default__media_youtube_video",
    'settings' => array(
      'width' => 640,
      'height' => 390,
      'theme' => 'dark',
      'color' => 'red',
      'protocol' => "https:",
      'autoplay' => 0,
      'loop' => 0,
      'autohide' => "2",
      'showinfo' => 1,
      'modestbranding' => 0,
      'rel' => 1,
      'nocookie' => 0,
      'protocol_specify' => 0,
      'enablejsapi' => 0,
      'origin' => "",
    ),
    'table' => 'file_display',
    'type' => 'Overridden',
    'export_type' => 3,
    'export_module' => "media_youtube",
  );


  //
  // PREVIEW VIEW MODE.
  //

  $displays['preview']['file_field_media_large_icon'] = array(
    'status' => 1,
    'weight' => "-50",
    'name' => "video__preview__file_field_media_large_icon",
    'settings' => NULL,
    'table' => 'file_display',
    'export_type' => 1,
    'type' => 'Local'
  );

  $displays['preview']['media_youtube_image'] = array(
    'status' => TRUE,
    'weight' => "-42",
    'name' => "video__preview__media_vimeo_image",
    'settings' => array(
      'image_style' => 'square_thumbnail',
    ),
    'table' => 'file_display',
    'type' => 'Local',
    'export_type' => 3,
    'export_module' => 'media_vimeo',
  );

  $displays['preview']['media_vimeo_image'] = array(
    'status' => TRUE,
    'weight' => "-41",
    'name' => "video__preview__media_youtube_image",
    'settings' => array(
      'image_style' => 'square_thumbnail',
    ),
    'table' => 'file_display',
    'type' => 'Local',
    'export_type' => 3,
    'export_module' => 'media_youtube',
  );

  // Save them all twice.
  foreach ($displays as $view_mode => $displayset) {
    foreach ($displayset as $k => $display) {
      file_display_save((object) $display);
    }
  }


}

//  ////////////////////////////////////////////////////////////////////////////
//  HOOKS N PATCHES FOR INCOMPATIBIILTY ISSUES
//  ////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_entity_info_alter().
 *
 * Add media_responsive view modes to the file entity type.
 */
function mediaconfig_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['media_crop'] = array('label' => t('Media Crop'), 'custom settings' => FALSE);
}

/**
 * If media_responsive and media_crop both exist we need to create a patch
 * between the two to work as they both override themeable output.
 * @param  [type] $element  [description]
 * @param  [type] $tag_info [description]
 * @param  [type] $settings [description]
 * @return [type]           [description]
 */
function mediaconfig_media_token_to_markup_alter(&$element, $tag_info, $settings) {

  if (module_exists('media_responsive') && module_exists('media_crop')) {

    if (isset($element['content']['file']['#style_name']) &&
    $element['content']['file']['#style_name'] == "media_responsive_widest") {

      // Copy attributes over.
      if (isset($element['content']['file']['#attributes'])) {
        $element['#attributes'] = $element['content']['file']['#attributes'];
      }

      // Adjust some styles.
      $style = isset($element['content']['file']['#attributes']['style']) ?  $element['content']['file']['#attributes']['style'] : '';
      $element['#attributes']['style'] = $style . 'max-width:' . $element['content']['file']['#width'] . 'px;';
      $element['#attributes']['width'] = "100%";
      $element['#attributes']['height'] = 'auto';

    }

  }

}

/**
 * Implements hook_module_implements_alter().
 *
 * Changes the hook order so that mediaconfigs hook_form_alter() runs after
 * other modules' hook_form_alter(). This was put in place in particular for
 * altering the file_entity_add_upload() form to inject manualcrop into the
 * initial file upload form process.
 */
function mediaconfig_module_implements_alter(&$implementations, $hook) {

  if ($hook == 'form_alter') {
    // Move mediaconfig_form_alter() to the end of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['mediaconfig'];
    unset($implementations['mediaconfig']);
    $implementations['mediaconfig'] = $group;
  }

}

/**
 * Implements hook_form_alter().
 *
 * For now, this is used as a placeholder which is needed in order for
 * hook_module_implements_alter() to properly change the ordering of
 * mediaconfig's form_alters so that they run after other modules' form_alters.
 * @see http://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_module_implements_alter/7
 */
function mediaconfig_form_alter(&$form, &$form_state, $form_id) {

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds descriptions to alt and title form fields that are used in media module
 * but not applied to the form fields derived from file_entity module. This
 * makes the descriptive text for these fields consistent.
 *
 * Adds manualcrop directly to image field upload in media browser upload form
 * so image field images can be cropped during the process of adding them.
 * Most of this is taken directly from manualcrop_form_file_entity_edit_alter()
 * in manualcrop.module.
 */
function mediaconfig_form_file_entity_add_upload_alter(&$form, &$form_state) {

  if (isset($form['field_file_image_alt_text'])) {
    $form['field_file_image_alt_text'][$form['field_file_image_alt_text']['#language']][0]['value']['#description'] = t('Alternative text is used by screen readers, search
        engines, and when the image cannot be loaded. By adding alt text you
        improve accesibility and search engine optimization.');
  }

  if (isset($form['field_file_image_title_text'])) {
    $form['field_file_image_title_text'][$form['field_file_image_title_text']['#language']][0]['value']['#description'] = t('Title text is used in the tool tip when a user hovers
        their mouse over the image. Adding title text makes it easier to
        understand the context of an image and improves usability.');
  }

  $step = (isset($form_state['step']) && in_array($form_state['step'], array(1, 2, 3))) ? $form_state['step'] : 1;

  if ($step == 3) {

    // Hide folder and tags fields to save space for manualcrop overlay.
    $form['field_folder']['#access'] = FALSE;
    $form['field_tags']['#access'] = FALSE;

    if (module_exists('manualcrop') && isset($_GET['manualcrop'])) {

      if ($form_state['storage']['type'] == 'image' && !empty($form_state['storage']['upload'])) {
        $file = file_load($form_state['storage']['upload']);
        $js_identifier = manualcrop_js_identifier($file);
        $settings = array();

        // If the parameters weren't correctly parsed, do it now.
        if (!isset($_GET['manualcrop']) && strpos($_GET['q'], '?') !== FALSE) {
          parse_str('q=' . str_replace('?', '&', $_GET['q']), $_GET);
        }

        // Check if the field info is passed.
        if (!empty($_GET['manualcrop']) && is_array($_GET['manualcrop'])) {
          $manualcrop = $_GET['manualcrop'];

          if (!empty($manualcrop['entity_type']) && !empty($manualcrop['bundle']) && !empty($manualcrop['field_name'])) {
            // Get the field instance.
            $instance = field_info_instance($manualcrop['entity_type'], $manualcrop['field_name'], $manualcrop['bundle']);

            if (!empty($instance)) {
              // A field instance was found, use its settings.
              $settings = $instance['widget']['settings'];

              if (empty($settings['manualcrop_enable'])) {
                // Manual Crop isn't enabled.
                return;
              }
            }
          }
        }

        // Prepare the form.
        manualcrop_croptool_prepare_form($form, $form_state, $js_identifier, $settings);

        // Add the croptool.
        manualcrop_croptool_process($form, $form_state, $js_identifier, $file, NULL, $settings);

        // Move manualcrop thumbnail to top of form.
        $form['manualcrop']['#weight'] = -10;
        // Hide the scroll css of manualcrop thumbnail.
        $form['#attached']['css'][] = drupal_get_path('module', 'mediaconfig') . '/css/mediaconfig.css';

        // Add the submit handler
        $form['#submit'][] = 'manualcrop_croptool_submit';

      }

    }

  }

}


//  ////////////////////////////////////////////////////////////////////////////
//   END HOOKS N PATCHES
//  ////////////////////////////////////////////////////////////////////////////




